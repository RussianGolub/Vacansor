import os
import json
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import FSInputFile
from matplotlib import pyplot as plt
from core.parser import VacancyParser
from core.filters import VacancyFilter
from core.visualizer import DataVisualizer
import matplotlib

matplotlib.use("Agg")

from config import TOKEN, HH_TOKEN

bot = Bot(token=TOKEN)
dp = Dispatcher()

user_data = {}


class Form(StatesGroup):
    search_query = State()
    filter_salary_from = State()
    filter_salary_to = State()
    filter_work_format = State()
    filter_region = State()
    filter_tech = State()
    filter_days = State()


class UserData:
    def __init__(self):
        self.vacancies = []
        self.current_vacancies = []
        self.filters = {}
        self.search_query = ""
        self.last_menu_message_id = None


parser = VacancyParser()
parser.APP_TOKEN = HH_TOKEN


class TelegramVisualizer(DataVisualizer):
    @staticmethod
    def save_plot(filename):
        plt.savefig(filename, bbox_inches="tight")
        plt.close()

    @classmethod
    def plot_salary_distribution(cls, vacancies):
        if not vacancies:
            return False
        super().plot_salary_distribution(vacancies)
        cls.save_plot("salary.png")
        return True

    @classmethod
    def plot_technology_popularity(cls, vacancies):
        if not vacancies:
            return False
        super().plot_technology_popularity(vacancies)
        cls.save_plot("tech.png")
        return True

    @classmethod
    def plot_work_distribution(cls, vacancies):
        if not vacancies:
            return False
        super().plot_work_format(vacancies)
        cls.save_plot("work.png")
        return True

    @classmethod
    def plot_exp_distribution(cls, vacancies):
        if not vacancies:
            return False
        super().plot_experience_distribution(vacancies)
        cls.save_plot("exp.png")
        return True

    @classmethod
    def plot_city_distribution(cls, vacancies):
        if not vacancies:
            return False
        super().plot_city_distribution(vacancies)
        cls.save_plot("city.png")
        return True


@dp.message(Command("start"))
async def start(message: types.Message):
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π", callback_data="start_search"
                )
            ],
            [types.InlineKeyboardButton(text="üö™ –í—ã—Ö–æ–¥", callback_data="exit_app")],
        ]
    )

    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∞–∫–∞–Ω—Å–∏–π!\n"
        "üìä –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ —Å HeadHunter\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
    )


@dp.callback_query(F.data == "start_search")
async def start_search_handler(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user_data[user_id] = UserData()

    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–ù–∞–ø—Ä–∏–º–µ—Ä: Java):",
        reply_markup=types.ReplyKeyboardRemove(),
    )
    await state.set_state(Form.search_query)
    await callback.answer()


@dp.message(Form.search_query)
async def process_search(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_data[user_id].search_query = message.text

    await message.answer("‚è≥ –ò–¥–µ—Ç –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π...")

    vacancies = parser.fetch_vacancies(message.text)
    user_data[user_id].vacancies = vacancies
    user_data[user_id].current_vacancies = vacancies.copy()

    await message.answer(
        f"–ù–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {len(vacancies)}\n" "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_keyboard(),
    )
    await state.clear()


def main_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üìä –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")],
            [types.KeyboardButton(text="‚öôÔ∏è –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏")],
            [types.KeyboardButton(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫")],
            [types.KeyboardButton(text="‚ùå –í—ã—Ö–æ–¥")],
        ],
        resize_keyboard=True,
    )


def back_to_menu_keyboard():
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≥—Ä–∞—Ñ–∏–∫–æ–≤", callback_data="back_to_viz_menu"
                )
            ]
        ]
    )


@dp.callback_query(F.data == "exit_app")
async def exit_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id in user_data:
        del user_data[user_id]
    await callback.message.answer(
        "–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞", reply_markup=types.ReplyKeyboardRemove()
    )
    await callback.answer()


@dp.message(F.text == "üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫")
async def new_search(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_data[user_id] = UserData()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:", reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(Form.search_query)


@dp.message(F.text == "üìä –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
async def visualization_menu(message: types.Message, user_id: int = None):
    if user_id is None:
        user_id = message.from_user.id

    try:
        if user_data[user_id].last_menu_message_id:
            await bot.delete_message(
                message.chat.id, user_data[user_id].last_menu_message_id
            )
    except:
        pass

    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="üí∞ –ó–∞—Ä–ø–ª–∞—Ç—ã –ø–æ —É—Ä–æ–≤–Ω—è–º", callback_data="viz_salary"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="üõ†Ô∏è –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–≤—ã–∫–∏", callback_data="viz_tech"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º", callback_data="viz_exp"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="üè¢ –§–æ—Ä–º–∞—Ç—ã —Ä–∞–±–æ—Ç—ã", callback_data="viz_work"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="üåç –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≥–æ—Ä–æ–¥–∞–º", callback_data="viz_city"
                )
            ],
            [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")],
        ]
    )

    msg = await message.answer("üìà –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞:", reply_markup=keyboard)
    user_data[user_id].last_menu_message_id = msg.message_id


@dp.callback_query(F.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard())
    await callback.message.delete()


@dp.callback_query(F.data == "back_to_viz_menu")
async def back_to_viz_menu(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    await visualization_menu(callback.message, user_id)


@dp.callback_query(F.data.startswith("viz_"))
async def process_viz(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    viz_type = callback.data.split("_")[1]
    vacancies = user_data[user_id].current_vacancies

    method_mapping = {
        "work": "plot_work_distribution",
        "exp": "plot_exp_distribution",
        "city": "plot_city_distribution",
        "tech": "plot_technology_popularity",
        "salary": "plot_salary_distribution",
    }

    if not vacancies:
        await callback.message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
        return

    try:
        if user_data[user_id].last_menu_message_id:
            try:
                await bot.delete_message(
                    callback.message.chat.id, user_data[user_id].last_menu_message_id
                )
            except:
                pass

        method_name = method_mapping.get(viz_type)
        if not method_name:
            raise AttributeError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞: {viz_type}")

        viz_method = getattr(TelegramVisualizer, method_name)
        success = viz_method(vacancies)

        if not success:
            await callback.message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
            return

        file = f"{viz_type}.png"
        await callback.message.answer_photo(
            FSInputFile(file),
            caption="–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏:",
            reply_markup=back_to_menu_keyboard(),
        )
        os.remove(file)
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")


@dp.message(F.text == "‚öôÔ∏è –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏")
async def filter_menu(message: types.Message):
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="üìä –ü–æ —É—Ä–æ–≤–Ω—é", callback_data="filter_level"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç", callback_data="filter_salary_from"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="üí∏ –ó–∞—Ä–ø–ª–∞—Ç–∞ –¥–æ", callback_data="filter_salary_to"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="üè¢ –§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã", callback_data="filter_work_format"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="üåç –†–µ–≥–∏–æ–Ω", callback_data="filter_region"
                )
            ],
            [types.InlineKeyboardButton(text="üõ†Ô∏è –ù–∞–≤—ã–∫–∏", callback_data="filter_tech")],
            [
                types.InlineKeyboardButton(
                    text="üìÖ –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", callback_data="filter_days"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", callback_data="apply_filters"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", callback_data="reset_filters"
                )
            ],
            [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")],
        ]
    )
    await message.answer("üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞:", reply_markup=keyboard)


@dp.callback_query(F.data == "filter_level")
async def filter_level(callback: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="Junior", callback_data="level_Junior")],
            [types.InlineKeyboardButton(text="Middle", callback_data="level_Middle")],
            [types.InlineKeyboardButton(text="Senior", callback_data="level_Senior")],
            [types.InlineKeyboardButton(text="–°–±—Ä–æ—Å–∏—Ç—å", callback_data="level_None")],
        ]
    )
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å:", reply_markup=keyboard)


@dp.callback_query(F.data.startswith("level_"))
async def process_level(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    level = callback.data.split("_")[1]
    if level == "None":
        user_data[user_id].filters.pop("–£—Ä–æ–≤–µ–Ω—å", None)
    else:
        user_data[user_id].filters["–£—Ä–æ–≤–µ–Ω—å"] = level
    await callback.message.answer(
        f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Ä–æ–≤–µ–Ω—å: {level if level != 'None' else '–°–±—Ä–æ—à–µ–Ω'}"
    )


@dp.callback_query(F.data == "filter_salary_from")
async def filter_salary_from(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞—Ä–ø–ª–∞—Ç—É:")
    await state.set_state(Form.filter_salary_from)


@dp.message(Form.filter_salary_from)
async def process_salary_from(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        salary = int(message.text)
        user_data[user_id].filters["–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç"] = salary
        await message.answer(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {salary}")
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
    await state.clear()


@dp.callback_query(F.data == "filter_salary_to")
async def filter_salary_to(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∑–∞—Ä–ø–ª–∞—Ç—É:")
    await state.set_state(Form.filter_salary_to)


@dp.message(Form.filter_salary_to)
async def process_salary_to(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        salary = int(message.text)
        user_data[user_id].filters["–ó–∞—Ä–ø–ª–∞—Ç–∞ –¥–æ"] = salary
        await message.answer(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {salary}")
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
    await state.clear()


@dp.callback_query(F.data == "filter_work_format")
async def filter_work_format(callback: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="üïò –ü–æ–ª–Ω—ã–π –¥–µ–Ω—å", callback_data="work_full"
                ),
                types.InlineKeyboardButton(
                    text="‚è±Ô∏è –ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫", callback_data="work_flex"
                ),
            ],
            [
                types.InlineKeyboardButton(
                    text="üîÑ –°–º–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫", callback_data="work_shift"
                ),
                types.InlineKeyboardButton(
                    text="üè† –£–¥–∞–ª—ë–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞", callback_data="work_remote"
                ),
            ],
            [
                types.InlineKeyboardButton(
                    text="üèïÔ∏è –í–∞—Ö—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥", callback_data="work_rotation"
                )
            ],
            [types.InlineKeyboardButton(text="‚ùå –°–±—Ä–æ—Å–∏—Ç—å", callback_data="work_none")],
        ]
    )
    await callback.message.answer("üè¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã:", reply_markup=keyboard)
    await callback.answer()


@dp.callback_query(F.data.startswith("work_"))
async def process_work_format(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    work_format = callback.data.split("_")[1]

    format_mapping = {
        "full": "–ü–æ–ª–Ω—ã–π –¥–µ–Ω—å",
        "flex": "–ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫",
        "shift": "–°–º–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫",
        "remote": "–£–¥–∞–ª—ë–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞",
        "rotation": "–í–∞—Ö—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥",
        "none": None,
    }

    selected_format = format_mapping.get(work_format)

    if selected_format:
        user_data[user_id].filters["–§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã"] = selected_format
        await callback.message.answer(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–æ—Ä–º–∞—Ç: {selected_format}")
    else:
        user_data[user_id].filters.pop("–§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã", None)
        await callback.message.answer("‚ùå –§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã —Å–±—Ä–æ—à–µ–Ω")

    await callback.answer()


@dp.callback_query(F.data == "apply_filters")
async def apply_filters(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    filtered = VacancyFilter.filter_vacancies(
        user_data[user_id].vacancies, user_data[user_id].filters
    )
    user_data[user_id].current_vacancies = filtered

    text = f"–ù–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {len(filtered)}\n"
    for vac in filtered[:5]:
        text += f"\n{vac['–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏']}\n–ó–∞—Ä–ø–ª–∞—Ç–∞: {vac['–ó–∞—Ä–ø–ª–∞—Ç–∞']['–æ—Ç']}-{vac['–ó–∞—Ä–ø–ª–∞—Ç–∞']['–¥–æ']} {vac['–ó–∞—Ä–ø–ª–∞—Ç–∞']['–≤–∞–ª—é—Ç–∞']}\n–°—Å—ã–ª–∫–∞: {vac['–°—Å—ã–ª–∫–∞']}\n"

    await callback.message.answer(text, reply_markup=main_keyboard())


@dp.callback_query(F.data == "reset_filters")
async def reset_filters(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_data[user_id].filters = {}
    user_data[user_id].current_vacancies = user_data[user_id].vacancies.copy()
    await callback.message.answer("–§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã")


@dp.callback_query(F.data == "filter_region")
async def filter_region(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞:")
    await state.set_state(Form.filter_region)


@dp.message(Form.filter_region)
async def process_region(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_data[user_id].filters["–†–µ–≥–∏–æ–Ω"] = message.text
    await message.answer(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–≥–∏–æ–Ω: {message.text}")
    await state.clear()


@dp.callback_query(F.data == "filter_tech")
async def filter_tech(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–≤—ã–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
    await state.set_state(Form.filter_tech)


@dp.message(Form.filter_tech)
async def process_tech(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    techs = [t.strip() for t in message.text.split(",")]
    user_data[user_id].filters["–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"] = techs
    await message.answer(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞–≤—ã–∫–∏: {', '.join(techs)}")
    await state.clear()


@dp.callback_query(F.data == "filter_days")
async def filter_days(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:")
    await state.set_state(Form.filter_days)


@dp.message(Form.filter_days)
async def process_days(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        days = int(message.text)
        user_data[user_id].filters["–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"] = days
        await message.answer(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π")
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
    await state.clear()


if __name__ == "__main__":
    dp.run_polling(bot)
