# —ç—Ç–æ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º –∂–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º, —á—Ç–æ –∏ —É —Ç–≥-–±–æ—Ç–∞
from core.parser import VacancyParser
from core.filters import VacancyFilter
from core.visualizer import DataVisualizer
from datetime import datetime


def main_menu():
    print("\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")
    print("1. –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    print("2. –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏")
    print("3. –í—ã—Ö–æ–¥")
    return input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")

def visualization_menu():
    print("\n–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö:")
    print("1. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç –ø–æ —É—Ä–æ–≤–Ω—è–º")
    print("2. –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –Ω–∞–≤—ã–∫–æ–≤")
    print("3. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º –æ–ø—ã—Ç–∞")
    print("4. –§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã")
    print("5. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≥–æ—Ä–æ–¥–∞–º")
    print("6. –ù–∞–∑–∞–¥")
    return input("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞: ")

def filter_menu():
    print("\n–§–∏–ª—å—Ç—Ä—ã:")
    print("1. –ü–æ —É—Ä–æ–≤–Ω—é")
    print("2. –ü–æ –∑–∞—Ä–ø–ª–∞—Ç–µ")
    print("3. –ü–æ —Ñ–æ—Ä–º–∞—Ç—É —Ä–∞–±–æ—Ç—ã")
    print("4. –ü–æ —Ä–µ–≥–∏–æ–Ω—É")
    print("5. –ü–æ –Ω–∞–≤—ã–∫—É")
    print("6. –ü–æ –¥–∞—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
    print("7. –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    print("8. –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã")
    print("9. –ù–∞–∑–∞–¥")
    return input("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä: ")

def main():
    parser = VacancyParser()
    filter = VacancyFilter()

    search_query = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞ (IT, Java, Python –∏ —Ç.–¥.): ")

    vacancies = parser.fetch_vacancies(search_query)
    print('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π:',len(vacancies))
    if not vacancies:
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return

    timestamp = datetime.now().strftime("%Y%m%d_%H%M")
    filename = f"vacancies_{search_query}_{timestamp}.json"
    parser.save_to_json(vacancies, filename)

    current_vacancies = vacancies.copy()
    active_filters = {}

    while True:
        choice = main_menu()

        if choice == '1':
            while True:
                viz_choice = visualization_menu()
                if viz_choice == '1':
                    DataVisualizer.plot_salary_distribution(current_vacancies)
                elif viz_choice == '2':
                    DataVisualizer.plot_technology_popularity(current_vacancies)
                elif viz_choice == '3':
                    DataVisualizer.plot_experience_distribution(current_vacancies)
                elif viz_choice == '4':
                    DataVisualizer.plot_work_format(current_vacancies)
                elif viz_choice == '5':
                    DataVisualizer.plot_city_distribution(current_vacancies)
                elif viz_choice == '6':
                    break

        elif choice == '2':
            while True:
                filter_choice = filter_menu()

                if filter_choice == '1':
                    level = input("–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å (Junior/Middle/Senior): ").capitalize()
                    active_filters["–£—Ä–æ–≤–µ–Ω—å"] = level if level in ["Junior", "Middle", "Senior"] else None

                elif filter_choice == '2':
                    salary_from = input("–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –µ—Å–ª–∏ –Ω–µ –≤–∞–∂–Ω–æ): ")
                    salary_to = input("–ó–∞—Ä–ø–ª–∞—Ç–∞ –¥–æ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –µ—Å–ª–∏ –Ω–µ –≤–∞–∂–Ω–æ): ")
                    active_filters["–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç"] = int(salary_from) if salary_from else None
                    active_filters["–ó–∞—Ä–ø–ª–∞—Ç–∞ –¥–æ"] = int(salary_to) if salary_to else None

                elif filter_choice == '3':
                    work_format = input("–í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã(–ü–æ–ª–Ω—ã–π –¥–µ–Ω—å,–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞,–ì–∏–±—Ä–∏–¥–Ω—ã–π –¥–µ–Ω—å): ")
                    active_filters["–§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã"] = work_format

                elif filter_choice == '4':
                    region = input("–í–≤–µ–¥–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω (–ú–∏–Ω—Å–∫/–î—Ä—É–≥–∏–µ –≥–æ—Ä–æ–¥–∞): ")
                    active_filters["–†–µ–≥–∏–æ–Ω"] = region

                elif filter_choice == '5':
                    techs = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–≤—ã–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: ").split(',')
                    active_filters["–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"] = [t.strip() for t in techs]

                elif filter_choice == '6':
                    days = input("–í–∞–∫–∞–Ω—Å–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π: ")
                    active_filters["–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"] = int(days) if days.isdigit() else None

                elif filter_choice == '7':
                    current_vacancies = filter.filter_vacancies(vacancies, active_filters)
                    print(f"\n–ù–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {len(current_vacancies)}")
                    for vac in current_vacancies[:5]:
                        print(f"\n{'='*50}")
                        print(f"üìå –î–æ–ª–∂–Ω–æ—Å—Ç—å: {vac['–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏']}")
                        print(f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {vac['–ö–æ–º–ø–∞–Ω–∏—è']}")
                        print(f"üîó –£—Ä–æ–≤–µ–Ω—å: {vac['–£—Ä–æ–≤–µ–Ω—å']}")
                        print(f"üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {vac['–ó–∞—Ä–ø–ª–∞—Ç–∞']['–æ—Ç']} - {vac['–ó–∞—Ä–ø–ª–∞—Ç–∞']['–¥–æ']} {vac['–ó–∞—Ä–ø–ª–∞—Ç–∞']['–≤–∞–ª—é—Ç–∞']}")
                        print(f"üîó –°—Å—ã–ª–∫–∞: {vac['–°—Å—ã–ª–∫–∞']}")
                        print(f"{'='*50}")

                elif filter_choice == '8':
                    active_filters = {}
                    current_vacancies = vacancies.copy()
                    print("\n–§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã")

                elif filter_choice == '9':
                    break

        elif choice == '3':
            print("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
            break

if __name__ == "__main__":
    main()